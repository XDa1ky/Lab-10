[
    {
        "label": "os",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "os",
        "description": "os",
        "detail": "os",
        "documentation": {}
    },
    {
        "label": "json",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "json",
        "description": "json",
        "detail": "json",
        "documentation": {}
    },
    {
        "label": "datetime",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "datetime",
        "description": "datetime",
        "detail": "datetime",
        "documentation": {}
    },
    {
        "label": "requests",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "requests",
        "description": "requests",
        "detail": "requests",
        "documentation": {}
    },
    {
        "label": "pyttsx3",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "pyttsx3",
        "description": "pyttsx3",
        "detail": "pyttsx3",
        "documentation": {}
    },
    {
        "label": "pyaudio",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "pyaudio",
        "description": "pyaudio",
        "detail": "pyaudio",
        "documentation": {}
    },
    {
        "label": "Model",
        "importPath": "vosk",
        "description": "vosk",
        "isExtraImport": true,
        "detail": "vosk",
        "documentation": {}
    },
    {
        "label": "KaldiRecognizer",
        "importPath": "vosk",
        "description": "vosk",
        "isExtraImport": true,
        "detail": "vosk",
        "documentation": {}
    },
    {
        "label": "speak",
        "kind": 2,
        "importPath": "main",
        "description": "main",
        "peekOfCode": "def speak(text: str):\n    \"\"\"Озвучить текст и вывести в консоль.\"\"\"\n    print(f\"Ассистент: {text}\")\n    engine.say(text)\n    engine.runAndWait()\n# ====== ФУНКЦИЯ РАСПОЗНАВАНИЯ С ГРАММАТИКОЙ ======\ndef recognize_speech() -> str:\n    \"\"\"\n    Слушает микрофон и возвращает распознанную команду из списка GRAMMAR.\n    \"\"\"",
        "detail": "main",
        "documentation": {}
    },
    {
        "label": "recognize_speech",
        "kind": 2,
        "importPath": "main",
        "description": "main",
        "peekOfCode": "def recognize_speech() -> str:\n    \"\"\"\n    Слушает микрофон и возвращает распознанную команду из списка GRAMMAR.\n    \"\"\"\n    model = Model(MODEL_PATH)\n    recognizer = KaldiRecognizer(model, RATE, json.dumps(GRAMMAR))\n    pa = pyaudio.PyAudio()\n    stream = pa.open(format=pyaudio.paInt16,\n                     channels=1,\n                     rate=RATE,",
        "detail": "main",
        "documentation": {}
    },
    {
        "label": "fetch_user",
        "kind": 2,
        "importPath": "main",
        "description": "main",
        "peekOfCode": "def fetch_user():\n    global current_user\n    try:\n        resp = requests.get(\"https://randomuser.me/api/\", timeout=10)\n        resp.raise_for_status()\n        current_user = resp.json()[\"results\"][0]\n        speak(\"Пользователь создан.\")\n    except Exception as e:\n        speak(\"Ошибка при создании пользователя.\")\n        print(\"Request error:\", e)",
        "detail": "main",
        "documentation": {}
    },
    {
        "label": "say_name",
        "kind": 2,
        "importPath": "main",
        "description": "main",
        "peekOfCode": "def say_name():\n    if not current_user:\n        speak(\"Сначала создайте пользователя.\")\n        return\n    n = current_user[\"name\"]\n    speak(f\"{n['title']} {n['first']} {n['last']}\")\ndef say_country():\n    if not current_user:\n        speak(\"Сначала создайте пользователя.\")\n        return",
        "detail": "main",
        "documentation": {}
    },
    {
        "label": "say_country",
        "kind": 2,
        "importPath": "main",
        "description": "main",
        "peekOfCode": "def say_country():\n    if not current_user:\n        speak(\"Сначала создайте пользователя.\")\n        return\n    speak(current_user[\"location\"][\"country\"])\ndef say_profile():\n    if not current_user:\n        speak(\"Сначала создайте пользователя.\")\n        return\n    n = current_user[\"name\"]",
        "detail": "main",
        "documentation": {}
    },
    {
        "label": "say_profile",
        "kind": 2,
        "importPath": "main",
        "description": "main",
        "peekOfCode": "def say_profile():\n    if not current_user:\n        speak(\"Сначала создайте пользователя.\")\n        return\n    n = current_user[\"name\"]\n    age = current_user[\"dob\"][\"age\"]\n    email = current_user[\"email\"]\n    city = current_user[\"location\"][\"city\"]\n    country = current_user[\"location\"][\"country\"]\n    text = f\"{n['title']} {n['first']} {n['last']}, {age} лет, email {email}, город {city}, страна {country}\"",
        "detail": "main",
        "documentation": {}
    },
    {
        "label": "save_picture",
        "kind": 2,
        "importPath": "main",
        "description": "main",
        "peekOfCode": "def save_picture():\n    if not current_user:\n        speak(\"Сначала создайте пользователя.\")\n        return\n    try:\n        url = current_user[\"picture\"][\"large\"]\n        ext = os.path.splitext(url)[-1] or \".jpg\"\n        filename = f\"user_{datetime.datetime.now().strftime('%Y%m%d_%H%M%S')}{ext}\"\n        img = requests.get(url, timeout=10)\n        img.raise_for_status()",
        "detail": "main",
        "documentation": {}
    },
    {
        "label": "main",
        "kind": 2,
        "importPath": "main",
        "description": "main",
        "peekOfCode": "def main():\n    speak(\"Голосовой ассистент готов.\")\n    while True:\n        try:\n            cmd = recognize_speech()    \n            print(f\"Команда: {cmd}\")\n            if \"закрыть\" in cmd or \"выход\" in cmd:\n                speak(\"До встречи.\")\n                break\n            elif \"создать\" in cmd:",
        "detail": "main",
        "documentation": {}
    },
    {
        "label": "MODEL_PATH",
        "kind": 5,
        "importPath": "main",
        "description": "main",
        "peekOfCode": "MODEL_PATH = \"model_small\"  # Папка с вашей моделью Vosk\nRATE = 16000                               # Частота дискретизации\nCHUNK = 8000                               # Размер буфера для чтения микрофона\nGRAMMAR = [\"закрыть\", \"выход\", \"создать\", \"имя\", \"страна\", \"анкета\", \"сохранить\"]  # Разрешённые команды\n# ====== ПРОВЕРКА НАЛИЧИЯ МОДЕЛИ ======\nif not os.path.isdir(MODEL_PATH):\n    print(f\"Ошибка: папка модели не найдена по пути: {MODEL_PATH}\")\n    print(\"Скачайте и распакуйте модель Vosk и укажите правильный путь в MODEL_PATH.\")\n    exit(1)\n# ====== ИНИЦИАЛИЗАЦИЯ TTS ======",
        "detail": "main",
        "documentation": {}
    },
    {
        "label": "RATE",
        "kind": 5,
        "importPath": "main",
        "description": "main",
        "peekOfCode": "RATE = 16000                               # Частота дискретизации\nCHUNK = 8000                               # Размер буфера для чтения микрофона\nGRAMMAR = [\"закрыть\", \"выход\", \"создать\", \"имя\", \"страна\", \"анкета\", \"сохранить\"]  # Разрешённые команды\n# ====== ПРОВЕРКА НАЛИЧИЯ МОДЕЛИ ======\nif not os.path.isdir(MODEL_PATH):\n    print(f\"Ошибка: папка модели не найдена по пути: {MODEL_PATH}\")\n    print(\"Скачайте и распакуйте модель Vosk и укажите правильный путь в MODEL_PATH.\")\n    exit(1)\n# ====== ИНИЦИАЛИЗАЦИЯ TTS ======\nengine = pyttsx3.init()",
        "detail": "main",
        "documentation": {}
    },
    {
        "label": "CHUNK",
        "kind": 5,
        "importPath": "main",
        "description": "main",
        "peekOfCode": "CHUNK = 8000                               # Размер буфера для чтения микрофона\nGRAMMAR = [\"закрыть\", \"выход\", \"создать\", \"имя\", \"страна\", \"анкета\", \"сохранить\"]  # Разрешённые команды\n# ====== ПРОВЕРКА НАЛИЧИЯ МОДЕЛИ ======\nif not os.path.isdir(MODEL_PATH):\n    print(f\"Ошибка: папка модели не найдена по пути: {MODEL_PATH}\")\n    print(\"Скачайте и распакуйте модель Vosk и укажите правильный путь в MODEL_PATH.\")\n    exit(1)\n# ====== ИНИЦИАЛИЗАЦИЯ TTS ======\nengine = pyttsx3.init()\nvoices = engine.getProperty('voices')",
        "detail": "main",
        "documentation": {}
    },
    {
        "label": "GRAMMAR",
        "kind": 5,
        "importPath": "main",
        "description": "main",
        "peekOfCode": "GRAMMAR = [\"закрыть\", \"выход\", \"создать\", \"имя\", \"страна\", \"анкета\", \"сохранить\"]  # Разрешённые команды\n# ====== ПРОВЕРКА НАЛИЧИЯ МОДЕЛИ ======\nif not os.path.isdir(MODEL_PATH):\n    print(f\"Ошибка: папка модели не найдена по пути: {MODEL_PATH}\")\n    print(\"Скачайте и распакуйте модель Vosk и укажите правильный путь в MODEL_PATH.\")\n    exit(1)\n# ====== ИНИЦИАЛИЗАЦИЯ TTS ======\nengine = pyttsx3.init()\nvoices = engine.getProperty('voices')\nif voices:",
        "detail": "main",
        "documentation": {}
    },
    {
        "label": "engine",
        "kind": 5,
        "importPath": "main",
        "description": "main",
        "peekOfCode": "engine = pyttsx3.init()\nvoices = engine.getProperty('voices')\nif voices:\n    engine.setProperty('voice', voices[0].id)\ndef speak(text: str):\n    \"\"\"Озвучить текст и вывести в консоль.\"\"\"\n    print(f\"Ассистент: {text}\")\n    engine.say(text)\n    engine.runAndWait()\n# ====== ФУНКЦИЯ РАСПОЗНАВАНИЯ С ГРАММАТИКОЙ ======",
        "detail": "main",
        "documentation": {}
    },
    {
        "label": "voices",
        "kind": 5,
        "importPath": "main",
        "description": "main",
        "peekOfCode": "voices = engine.getProperty('voices')\nif voices:\n    engine.setProperty('voice', voices[0].id)\ndef speak(text: str):\n    \"\"\"Озвучить текст и вывести в консоль.\"\"\"\n    print(f\"Ассистент: {text}\")\n    engine.say(text)\n    engine.runAndWait()\n# ====== ФУНКЦИЯ РАСПОЗНАВАНИЯ С ГРАММАТИКОЙ ======\ndef recognize_speech() -> str:",
        "detail": "main",
        "documentation": {}
    },
    {
        "label": "current_user",
        "kind": 5,
        "importPath": "main",
        "description": "main",
        "peekOfCode": "current_user = None\ndef fetch_user():\n    global current_user\n    try:\n        resp = requests.get(\"https://randomuser.me/api/\", timeout=10)\n        resp.raise_for_status()\n        current_user = resp.json()[\"results\"][0]\n        speak(\"Пользователь создан.\")\n    except Exception as e:\n        speak(\"Ошибка при создании пользователя.\")",
        "detail": "main",
        "documentation": {}
    }
]